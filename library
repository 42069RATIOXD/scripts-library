genv = getgenv()

start_gc = getgc(true) --it won't get updated so that there will be no lags

function print_table(t)
if type(t) == "table" then
    for i, v in next, t do
        print(i, v)
    end
    end
end

function hydroxide()
  local owner = "Upbolt"
  local branch = "revision"
  
  local function webImport(file)
      return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
  end
  
  webImport("init")
  webImport("ui/main")
end

function infinite_yield()
  loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end

function shop(min, max)
local goofyahhvalue = math.random(min, max)
local Player = game.Players.LocalPlayer    
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place,_id = game.PlaceId, game.JobId
local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
function ListServers(cursor)
local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
return Http:JSONDecode(Raw)
end

local Next; repeat
task.wait()
local Servers = ListServers(Next)
for i,v in next, Servers.data do
if v.playing < goofyahhvalue and v.id ~= _id then
local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
if s then task.wait(5) break end
end
end

Next = Servers.nextPageCursor
until not Next
end

genv.start_gc = start_gc
genv.print_table = print_table
genv.execute_hydroxide = execute_hydroxide
genv.execute_infinite_yield = execute_infinite_yield
genv.shop = shop

genv.postWebhook = function(content, message, webhook_url)
    task.spawn(function()
        local data = {
            ["content"] = content,
            ["embeds"] = {
                {
                    ["title"] = "",
                    ["description"] = message,
                    ["type"] = "rich",
                    ["color"] = tonumber(12993321),
                    ["image"] = {
                        ["url"] = ""
                    }
                }
            }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
        
        local headers = {
            ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost
        local abcdef = {
            Url = webhook_url,
            Body = newdata,
            Method = "POST",
            Headers = headers
        }
        local postSucceeded = false
        local tryTimes = 0
        repeat
            tryTimes += 1
            local req = request(abcdef)
            postSucceeded = req.Success
            task.wait(0.1)
        until
            postSucceeded == true or tryTimes >= 5
    end)
end
