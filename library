genv = getgenv()

start_gc = getgc(true) --it won't get updated so that there will be no lags

function print_table(t)
if type(t) == "table" then
    for i, v in next, t do
        print(i, v)
    end
    end
end

function execute_hydroxide()
  local owner = "Upbolt"
  local branch = "revision"
  
  local function webImport(file)
      return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
  end
  
  webImport("init")
  webImport("ui/main")
end

function execute_infinite_yield()
  loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end

function shop(min, max)
local goofyahhvalue = math.random(min, max)
local Player = game.Players.LocalPlayer    
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place,_id = game.PlaceId, game.JobId
local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
function ListServers(cursor)
local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
return Http:JSONDecode(Raw)
end

local Next; repeat
task.wait()
local Servers = ListServers(Next)
for i,v in next, Servers.data do
if v.playing < goofyahhvalue and v.id ~= _id then
task.wait(1)
local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
if s then break end
end
end

Next = Servers.nextPageCursor
until not Next
end

genv.start_gc = start_gc
genv.print_table = print_table
genv.execute_hydroxide = execute_hydroxide
genv.execute_infinite_yield = execute_infinite_yield
genv.shop = shop
