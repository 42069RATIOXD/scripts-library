local genv = getgenv()

assert(getscriptbytecode, "Exploit not supported.")

local API: string = "http://api.plusgiant5.com"

local last_call = 0
local function call(konstantType: string, scriptPath: Script | ModuleScript | LocalScript): string
    local success: boolean, bytecode: string = pcall(getscriptbytecode, scriptPath)

    if (not success) then
        return `-- Failed to get script bytecode, error:\n\n--[[\n{bytecode}\n--]]`
    end

    local time_elapsed = os.clock() - last_call
    if time_elapsed <= .5 then
        task.wait(.5 - time_elapsed)
    end
    local httpResult = request({
        Url = API .. konstantType,
        Body = bytecode,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "text/plain"
        },
    })
    last_call = os.clock()
    
    if (httpResult.StatusCode ~= 200) then
        return `-- Error occured while requesting the API, error:\n\n--[[\n{httpResult.Body}\n--]]`
    else
        return httpResult.Body
    end
end

local function decompile(scriptPath: Script | ModuleScript | LocalScript): string
    return call("/konstant/decompile", scriptPath)
end

local function disassemble(scriptPath: Script | ModuleScript | LocalScript): string
    return call("/konstant/disassemble", scriptPath)
end

getgenv().decompile = decompile
getgenv().disassemble = disassemble

return {
    start_gc = getgc(true), --it won't get updated so that there will be no lags

    print_table = function(t)
        if type(t) == "table" then
            for i, v in next, t do
                print(i, v)
            end
        end
    end,

    hydroxide = function()
        local owner = "Upbolt"
        local branch = "revision"
        
        local function webImport(file)
            return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
        end
        
        webImport("init")
        webImport("ui/main")
    end,
    
    infinite_yield = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
    
    shop = function(min, max)
    local goofyahhvalue = math.random(min, max)
    local Player = game.Players.LocalPlayer    
    local Http = game:GetService("HttpService")
    local TPS = game:GetService("TeleportService")
    local Api = "https://games.roblox.com/v1/games/"
    
    local _place,_id = game.PlaceId, game.JobId
    local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
    function ListServers(cursor)
    local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
    return Http:JSONDecode(Raw)
    end
    
    local Next; repeat
    task.wait()
    local Servers = ListServers(Next)
    for i,v in next, Servers.data do
    if v.playing < goofyahhvalue and v.id ~= _id then
    local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
    if s then task.wait(5) break end
    end
    end
    
    Next = Servers.nextPageCursor
    until not Next
    end,
    
    postWebhook = function(content, message, webhook_url)
        task.spawn(function()
            local data = {
                ["content"] = content,
                ["embeds"] = {
                    {
                        ["title"] = "",
                        ["description"] = message,
                        ["type"] = "rich",
                        ["color"] = tonumber(12993321),
                        ["image"] = {
                            ["url"] = ""
                        }
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            
            local headers = {
                ["content-type"] = "application/json"
            }
            request = http_request or request or HttpPost
            local abcdef = {
                Url = webhook_url,
                Body = newdata,
                Method = "POST",
                Headers = headers
            }
            local postSucceeded = false
            local tryTimes = 0
            repeat
                tryTimes += 1
                local req = request(abcdef)
                postSucceeded = req.Success
                task.wait(0.1)
            until
                postSucceeded == true or tryTimes >= 5
        end)
    end
}
